@use "./function" as *;
@use "./color" as *;

// Breakpoint for responsive design
// - Mobile-first approach
// - @{breakpoint} : which has been staticly defined at the map
// - Return : return the adaptive condiguration based on the screen size
// - Dart Sass version

$breakpoints: (
  "small-mobile": 320px,
  "mobile": 321px,
  "tablet": 426px,
  "laptop": 992px,
  "large-laptop": 1200px,
);

@mixin design-respond-to($device) {
  @if not map-has-key($map: $breakpoints, $key: $device) {
    @warn ("Unfortunately, no value could be retrieved from `#{$device}` ."
        + "Available breakpoints are : `#{map-keys($map: $breakpoints)}`");
  } @else {
    $value: map-get(
      $map: $breakpoints,
      $key: $device,
    );
    // Cannot apply (max-width: 600px) due to the new Dart Sass version
    @if ($device == "small-mobile") {
      @media (max-width: $value) {
        @content;
      }
    } @else {
      @media (min-width: $value) {
        @content;
      }
    }
  }
}

// Generate shadow mode for interior design
// - Currently support: Text, Box
// - @{modes} : which has been static defined at the map
// - Return : return the shadow based on the key

$modes: (
  "text": (
    "light": 1px 1px 1px rgb(204, 222, 228),
    "dark": "",
  ),
  "box": (
    "light": 1px 1px 19px -1px rgba(255, 238, 238, 0.61),
    "dark": 1px 1px 5px -1px rgba(17, 16, 16, 0.61),
  ),
);

@mixin generate-shadow($component: "text", $mode: "light") {
  @if not map-has-key($map: $modes, $key: $component) {
    @warn ("Unfortunately, no value could be retrieved from `#{$component}` ."
        + "Available Variables : `#{map-keys($map: $modes)}`");
  } @else {
    $value: map-deep-get($modes, $component, $mode);

    // Text Shadown
    @if $component == "text" {
      text-shadow: $value;
    }

    // Box Shadown
    @else if $component == "box" {
      box-shadow: $value;
    }

    @content;
  }
}

// Generate perfect grid gap between childrens
// - @{The child's width made up } : %, px, rem,....
// - Formular: margin-bottom =
//          ( total-parent-width - ( childWidth * numsChild ) ) %
//                                            ( numsChild - 1 )
// - Return : Void

@mixin generate-perfect-flex($childWidth: 50%, $childsPerRow: 1) {
  & {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    @content;

    > * {
      flex: 0 0 $childWidth;
      margin-bottom: calc(calc(100% - calc(#{$childsPerRow} * #{$childWidth})) / (#{$childsPerRow} - 1));
    }
  }
}

//! Experimental
//! Error on interpolating values into keyframes function
// Generate auto splashing underline
// - Return : Beautiful splashing underline :)) + animation

@mixin generate-underline($width: 100%, $height: 1px, $color: $color-dark) {
  & {
    position: absolute;
    content: "";
    background-color: $color;
    height: $height;
    top: 103%;
    left: 0;
    border-radius: 10px;
    // Keyframe for underlining title animation
    // - forwards keep the property after the end state
    animation: underline-splashing 2s 1 forwards;
    @-webkit-keyframes underline-splashing {
      from {
        width: 0%;
      }
      to {
        width: #{$width};
      }
    }
    @-moz-keyframes underline-splashing {
      from {
        width: 0%;
      }
      to {
        width: #{$width};
      }
    }
    @-ms-keyframes underline-splashing {
      from {
        width: 0%;
      }
      to {
        width: #{$width};
      }
    }
    @-o-keyframes underline-splashing {
      from {
        width: 0%;
      }
      to {
        width: #{$width};
      }
    }
    @keyframes underline-splashing {
      from {
        width: 0%;
      }
      to {
        width: #{$width};
      }
    }
  }
}
